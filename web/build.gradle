buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: 'java'
apply plugin: "com.moowork.node"

group = 'org.hillview'
version = '1.0-SNAPSHOT'

description = "web"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    compile project(':platform')
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile group: 'io.reactivex', name: 'rxjava', version: '1.2.9'
    compile group: 'org.apache.tomcat', name: 'tomcat-websocket', version: '8.5.8'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.1'
    compile group: 'com.univocity', name: 'univocity-parsers', version: '2.5.5'
    compile group: 'org.jblas', name: 'jblas', version: '1.2.4'
    compile group: 'it.unimi.dsi', name: 'dsiutils', version: '2.4.0'
    compile group: 'net.openhft', name: 'zero-allocation-hashing', version: '0.8'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

node {
    download = true
    nodeModulesDir = file("${project.projectDir}/src/main/webapp")
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    workingDir = node.nodeModulesDir
    script = file("${node.nodeModulesDir}/node_modules/webpack/bin/webpack.js")
    args = ['--display-modules']
    doLast {
        File bundle = new File("${node.nodeModulesDir}/bundle.js")
        if (!bundle.exists()) {
            throw new GradleException(bundle.path + " is not created")
        }
        def destDir = "$buildDir/static-ui"
        File dest = new File(destDir)
        if (!dest.exists() && !dest.mkdirs()) {
            throw new GradleException("Failed to create " + dest.path)
        }
        bundle.renameTo "$destDir/bundle.js"
        File bundleMap = new File("${node.nodeModulesDir}/bundle.js.map")
        if (bundleMap.exists()) {
            bundleMap.renameTo "$destDir/bundle.js.map"
        }
        copy {
            from node.nodeModulesDir
            into destDir
            include '*.html'
            include '*.png'
        }
    }
}

build.dependsOn(webpack)